package com.example.elasticsearchreactivedemo.controller;

import com.example.elasticsearchreactivedemo.model.ProductDocument;
import com.example.elasticsearchreactivedemo.service.ProductService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@RestController
@RequestMapping("/api/v1/products")
@RequiredArgsConstructor
@Slf4j
public class ProductController {

    private final ProductService productService;

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    public Mono<ProductDocument> createProduct(@RequestBody ProductDocument product) {
        log.info("Received request to create product: {}", product.getName());
        // ID is typically generated by the service or ES, so don't expect it in request body usually
        // Ensure ID is null or handle appropriately if client tries to set it
        product.setId(null);
        return productService.saveProduct(product);
    }

    @GetMapping("/{id}")
    public Mono<ResponseEntity<ProductDocument>> getProductById(@PathVariable String id) {
        log.info("Received request to get product with ID: {}", id);
        return productService.getProductById(id)
            .map(ResponseEntity::ok) // If found, wrap in 200 OK
            .defaultIfEmpty(ResponseEntity.notFound().build()); // If Mono is empty (not found), return 404
    }

    @GetMapping("/search")
    public Flux<ProductDocument> searchProducts(@RequestParam String query) {
        log.info("Received request to search products with query: '{}'", query);
        return productService.searchProducts(query);
    }

    @PutMapping("/{id}")
     public Mono<ResponseEntity<ProductDocument>> updateProduct(@PathVariable String id, @RequestBody ProductDocument product) {
        log.info("Received request to update product with ID {}: {}", id, product.getName());
         // Ensure the ID from the path is set on the object to be saved
        product.setId(id);
        // Use saveProduct which acts like upsert
        return productService.saveProduct(product)
            .map(ResponseEntity::ok)
             // Add error handling if save fails or if you want to ensure it previously existed
            .defaultIfEmpty(ResponseEntity.notFound().build()); // Or handle based on saveProduct's result/exceptions
    }


    @DeleteMapping("/{id}")
    public Mono<ResponseEntity<Void>> deleteProduct(@PathVariable String id) {
        log.info("Received request to delete product with ID: {}", id);
        return productService.deleteProduct(id)
            .then(Mono.just(ResponseEntity.noContent().<Void>build())) // If delete succeeds, return 204 No Content
            .onErrorResume(e -> { // Example: Handle potential errors like NotFoundException if thrown by service
                 log.error("Error deleting product {}: {}", id, e.getMessage());
                 // Could map specific exceptions to different statuses
                 return Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).<Void>build());
            });
            // If service's deleteProduct doesn't throw for NotFound, you might check existence first
            // or rely on the delete operation potentially returning a specific status/result.
            // The current service logs NotFound but completes normally.
    }
}